EKF Localization
=================

Initialize the simulation
  #time/timer += [period: 1<ms>]
  #robot = [x: 250, y: 15, θ: 0]
  #robot-hat = [x: 250, y: 25, θ: 0.3927]
  #control = [v: 5, ω: 0.05]
  #camera = [x: 40 y: 17]
  #Σ = [100   0 0
          0 100 0
          0   0 0.1542]

1. Time Update
---------------
  
  ~ #time/timer
  Δt = 0.1
  Q = [0.0225 0
       0      0.0305]
  v-p = #control.v + Q{1,1}
  ω-p = #control.ω + Q{2,2}
  x-p = #robot.x + #control.v * math/cos(angle: #robot.θ) * Δt
  y-p = #robot.y + #control.v * math/sin(angle: #robot.θ) * Δt
  θ-p = #robot.θ + #control.ω * Δt
  x-hat-p = #robot-hat.x + v-p * math/cos(angle: #robot-hat.θ) * Δt
  y-hat-p = #robot-hat.y + v-p * math/sin(angle: #robot-hat.θ) * Δt
  θ-hat-p = #robot-hat.θ + ω-p * Δt
  Gv = [1  0  -v-p * math/sin(angle: θ-p) * Δt
        0  1   v-p * math/cos(angle: θ-p) * Δt
        0  0   1]

  Gu = [math/cos(angle: θ-p) * Δt  0
        math/sin(angle: θ-p) * Δt  0
        0                          Δt]
  #robot.x := x-p
  #robot.y := y-p
  #robot.θ := θ-p
  #robot-hat.x := x-hat-p
  #robot-hat.y := y-hat-p
  #robot-hat.θ := θ-hat-p
  #Σ := Gv ** #Σ ** Gv' + Gu ** Q ** Gu'

2. Measurement Update
----------------------

  ~ #time/timer
  σ = 0.0524
  μ = [#robot-hat.x
       #robot-hat.y 
       #robot-hat.θ]
  Δy-p = #camera.y - #robot-hat.y
  Δx-p = #camera.x - #robot-hat.x
  z-p = math/atan2(y: Δy-p, x: Δx-p) - #robot-hat.θ  
  Δy = #camera.y - #robot.y
  Δx = #camera.x - #robot.x
  z = math/atan2(y: Δy, x: Δx) - #robot.θ  
  q = Δx-p ^ 2 + Δy-p ^ 2
  H = [Δy-p / q, -Δx-p / q, -1]                      
  Z = H ** #Σ ** H' + σ                           
  K = #Σ ** H' / Z
  μ-p = μ + K * (z - z-p)
  #robot-hat.x := μ-p{1}
  #robot-hat.y := μ-p{2}
  #robot-hat.θ := μ-p{3}
  #Σ := ([1 0 0; 0 1 0; 0 0 1] - K ** H) ** #Σ

3. Draw
--------

Define the shapes
  #robot-drawing = [
    shape: "circle" 
    parameters: [
      center-x: #robot.x
      center-y: #robot.y + 250
      radius: 10.0      
      fill: 0xFF0000    
      line-width: 1.0
    ]
  ]
  #robot-hat-drawing = [
    shape: "circle" 
    parameters: [
      center-x: #robot-hat.x
      center-y: #robot-hat.y + 250
      radius: 10.0      
      fill: 0x00FF00    
      line-width: 1.0
    ]
  ]
Draw a shape to the canvas
  shapes = [#robot-drawing; #robot-hat-drawing]
  canvas = [
    kind: "canvas" 
    contains: [|shape parameters| shapes] 
    parameters: [width: 500.0 height: 500.0]
  ]
  #html/app = [
    root: "mech-root" 
    contains: [|kind contains parameters| canvas]
  ]